/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace SharedStructs {
  export type PlanetStruct = {
    planetID: BigNumberish;
    worldMapIndex: BigNumberish;
    xCoord: BigNumberish;
    yCoord: BigNumberish;
    planetType: BigNumberish;
    balance: BigNumberish;
  };

  export type PlanetStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    planetID: BigNumber;
    worldMapIndex: BigNumber;
    xCoord: BigNumber;
    yCoord: BigNumber;
    planetType: BigNumber;
    balance: BigNumber;
  };
}

export interface PlanetFactoryInterface extends utils.Interface {
  functions: {
    "_retrieveRandomNumber()": FunctionFragment;
    "createPlanet(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "existingPlanets(uint256)": FunctionFragment;
    "getPlanet(uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "planetTypes(uint256)": FunctionFragment;
    "retrieveTokens(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_retrieveRandomNumber"
      | "createPlanet"
      | "existingPlanets"
      | "getPlanet"
      | "initialize"
      | "planetTypes"
      | "retrieveTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_retrieveRandomNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPlanet",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "existingPlanets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "planetTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveTokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_retrieveRandomNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPlanet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existingPlanets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlanet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "planetTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveTokens",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PlanetFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlanetFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _retrieveRandomNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPlanet(
      _planetID: BigNumberish,
      _worldMapIndex: BigNumberish,
      _xCoord: BigNumberish,
      _yCoord: BigNumberish,
      _planetType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    existingPlanets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        planetID: BigNumber;
        worldMapIndex: BigNumber;
        xCoord: BigNumber;
        yCoord: BigNumber;
        planetType: BigNumber;
        balance: BigNumber;
      }
    >;

    getPlanet(
      _planetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[SharedStructs.PlanetStructOutput]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    planetTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        radius: BigNumber;
        yield_source: string;
        image_link: string;
      }
    >;

    retrieveTokens(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _retrieveRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

  createPlanet(
    _planetID: BigNumberish,
    _worldMapIndex: BigNumberish,
    _xCoord: BigNumberish,
    _yCoord: BigNumberish,
    _planetType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  existingPlanets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      planetID: BigNumber;
      worldMapIndex: BigNumber;
      xCoord: BigNumber;
      yCoord: BigNumber;
      planetType: BigNumber;
      balance: BigNumber;
    }
  >;

  getPlanet(
    _planetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<SharedStructs.PlanetStructOutput>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  planetTypes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      radius: BigNumber;
      yield_source: string;
      image_link: string;
    }
  >;

  retrieveTokens(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _retrieveRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    createPlanet(
      _planetID: BigNumberish,
      _worldMapIndex: BigNumberish,
      _xCoord: BigNumberish,
      _yCoord: BigNumberish,
      _planetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    existingPlanets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        planetID: BigNumber;
        worldMapIndex: BigNumber;
        xCoord: BigNumber;
        yCoord: BigNumber;
        planetType: BigNumber;
        balance: BigNumber;
      }
    >;

    getPlanet(
      _planetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<SharedStructs.PlanetStructOutput>;

    initialize(overrides?: CallOverrides): Promise<void>;

    planetTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        radius: BigNumber;
        yield_source: string;
        image_link: string;
      }
    >;

    retrieveTokens(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    _retrieveRandomNumber(overrides?: CallOverrides): Promise<BigNumber>;

    createPlanet(
      _planetID: BigNumberish,
      _worldMapIndex: BigNumberish,
      _xCoord: BigNumberish,
      _yCoord: BigNumberish,
      _planetType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    existingPlanets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanet(
      _planetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    planetTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieveTokens(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _retrieveRandomNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPlanet(
      _planetID: BigNumberish,
      _worldMapIndex: BigNumberish,
      _xCoord: BigNumberish,
      _yCoord: BigNumberish,
      _planetType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    existingPlanets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanet(
      _planetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    planetTypes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retrieveTokens(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
