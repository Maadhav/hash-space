/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface PlayersInterface extends utils.Interface {
  functions: {
    "determineStartingPosition()": FunctionFragment;
    "incrementPositionCounter()": FunctionFragment;
    "indexStartingPosition()": FunctionFragment;
    "moveShip(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "players(address)": FunctionFragment;
    "registerProfile()": FunctionFragment;
    "setNftAddress(address)": FunctionFragment;
    "setWorldAddress(address)": FunctionFragment;
    "syncSteps(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "determineStartingPosition"
      | "incrementPositionCounter"
      | "indexStartingPosition"
      | "moveShip"
      | "players"
      | "registerProfile"
      | "setNftAddress"
      | "setWorldAddress"
      | "syncSteps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "determineStartingPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementPositionCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "indexStartingPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "moveShip",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "players", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorldAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "syncSteps",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "determineStartingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementPositionCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexStartingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moveShip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorldAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncSteps", data: BytesLike): Result;

  events: {};
}

export interface Players extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PlayersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    determineStartingPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    incrementPositionCounter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    indexStartingPosition(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    players(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        playerId: BigNumber;
        timeJoined: BigNumber;
        lastQueried: BigNumber;
        stepsAvailable: BigNumber;
        totalStepsTaken: BigNumber;
      }
    >;

    registerProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncSteps(
      steps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  determineStartingPosition(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  incrementPositionCounter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  indexStartingPosition(overrides?: CallOverrides): Promise<BigNumber>;

  moveShip(
    x: BigNumberish,
    y: BigNumberish,
    _planetId: BigNumberish,
    _shipId: BigNumberish,
    _worldId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  players(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      playerId: BigNumber;
      timeJoined: BigNumber;
      lastQueried: BigNumber;
      stepsAvailable: BigNumber;
      totalStepsTaken: BigNumber;
    }
  >;

  registerProfile(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftAddress(
    _nftContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWorldAddress(
    _worldAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncSteps(
    steps: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    determineStartingPosition(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    incrementPositionCounter(overrides?: CallOverrides): Promise<void>;

    indexStartingPosition(overrides?: CallOverrides): Promise<BigNumber>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    players(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        playerId: BigNumber;
        timeJoined: BigNumber;
        lastQueried: BigNumber;
        stepsAvailable: BigNumber;
        totalStepsTaken: BigNumber;
      }
    >;

    registerProfile(overrides?: CallOverrides): Promise<void>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    syncSteps(steps: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    determineStartingPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    incrementPositionCounter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    indexStartingPosition(overrides?: CallOverrides): Promise<BigNumber>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    players(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registerProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncSteps(
      steps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    determineStartingPosition(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    incrementPositionCounter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    indexStartingPosition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveShip(
      x: BigNumberish,
      y: BigNumberish,
      _planetId: BigNumberish,
      _shipId: BigNumberish,
      _worldId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    players(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerProfile(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftAddress(
      _nftContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWorldAddress(
      _worldAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncSteps(
      steps: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
