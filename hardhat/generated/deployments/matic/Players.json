{
  "address": "0xB42733C82cB53831dA9a43c0cbC7ab21c9Cd0CE4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "planetType",
          "type": "uint256"
        }
      ],
      "name": "PlanetConquer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stepsTaken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StepsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountFunded",
          "type": "uint256"
        }
      ],
      "name": "TreasuryFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NFTPRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "determineStartingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexStartingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_planetId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shipId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_worldId",
          "type": "uint256"
        }
      ],
      "name": "moveShip",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "playerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeJoined",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stepsAvailable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStepsTaken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountEarned",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "registerProfile",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setAaveVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setBackendAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftContractAddress",
          "type": "address"
        }
      ],
      "name": "setNftAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worldAddress",
          "type": "address"
        }
      ],
      "name": "setWorldAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedMessageBackend",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_steps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "syncSteps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedMessageBackend",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_message",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lastQueried",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "verifySteps",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x13b68227da80f65dd65d69a533fb7323f877f206e7467ccf8410258fa2028543",
  "receipt": {
    "to": null,
    "from": "0xeA6011Ff0d0D076C40d41EF33BC1D25FF5a52c15",
    "contractAddress": "0xB42733C82cB53831dA9a43c0cbC7ab21c9Cd0CE4",
    "transactionIndex": 58,
    "gasUsed": "2076231",
    "logsBloom": "0x
    "blockHash": "0x5914710f8ca757a4a7e0a01e196f3e5140323310b8d33f548507114a3e3c0fd5",
    "transactionHash": "0x13b68227da80f65dd65d69a533fb7323f877f206e7467ccf8410258fa2028543",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 26810335,
        "transactionHash": "0x13b68227da80f65dd65d69a533fb7323f877f206e7467ccf8410258fa2028543",
        "address": "0xB42733C82cB53831dA9a43c0cbC7ab21c9Cd0CE4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ea6011ff0d0d076c40d41ef33bc1d25ff5a52c15"
        ],
        "data": "0x",
        "logIndex": 204,
        "blockHash": "0x5914710f8ca757a4a7e0a01e196f3e5140323310b8d33f548507114a3e3c0fd5"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 26810335,
        "transactionHash": "0x13b68227da80f65dd65d69a533fb7323f877f206e7467ccf8410258fa2028543",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ea6011ff0d0d076c40d41ef33bc1d25ff5a52c15",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002b95ef594ac720000000000000000000000000000000000000000000000000420269eab47dd492000000000000000000000000000000000000000000001b39c5b65a17ab05784600000000000000000000000000000000000000000000000041d6d3fb5b330d72000000000000000000000000000000000000000000001b39c5e1f00704503f66",
        "logIndex": 205,
        "blockHash": "0x5914710f8ca757a4a7e0a01e196f3e5140323310b8d33f548507114a3e3c0fd5"
      }
    ],
    "blockNumber": 26810335,
    "cumulativeGasUsed": "5485424",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "98a6832ccea88e5df9d08f758e6da55f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"planetType\",\"type\":\"uint256\"}],\"name\":\"PlanetConquer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stepsTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StepsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountFunded\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NFTPRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"determineStartingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexStartingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_planetId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shipId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_worldId\",\"type\":\"uint256\"}],\"name\":\"moveShip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeJoined\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepsAvailable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStepsTaken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"registerProfile\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setAaveVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setBackendAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"name\":\"setNftAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldAddress\",\"type\":\"address\"}],\"name\":\"setWorldAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessageBackend\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_steps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"syncSteps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedMessageBackend\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_message\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lastQueried\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"verifySteps\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"moveShip(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Move the ship to a new position {_planetId} the planet you want to reach {_shipId} the ship you are moving\"},\"registerProfile(string)\":{\"notice\":\"Creates the user profile of the user and mints a starship nft and forwards $$ to the treasury\"},\"setAaveVault(address)\":{\"notice\":\"We set the Worldcontract Contract, this can also be done in the constructor\"},\"setBackendAddress(address)\":{\"notice\":\"The address of our web2 backend. Messages from the backend which are verified in this contract\"},\"setNftAddress(address)\":{\"notice\":\"We set the Nft Contract, this can also be done in the constructor\"},\"setWorldAddress(address)\":{\"notice\":\"We set the Worldcontract Contract, this can also be done in the constructor\"},\"syncSteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sync the steps for the user\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Players.sol\":\"Players\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/Players.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IPlanet.sol\\\";\\nimport \\\"./interfaces/IWorld.sol\\\";\\nimport \\\"./interfaces/IHashVault.sol\\\";\\n\\ncontract Players is Ownable {\\n    using Counters for Counters.Counter;\\n\\n    uint256 constant public NFTPRICE = 0.01 ether;\\n\\n    struct PersonProfile {\\n            uint256 playerId;\\n            uint256 timeJoined;\\n            uint256 lastQueried;\\n            uint256 stepsAvailable;\\n            uint256 totalStepsTaken;\\n            uint256 amountEarned;\\n    }\\n\\n    Counters.Counter indexPlayerIds;\\n    Counters.Counter public indexStartingPosition;\\n    address backendAddress;\\n\\n    mapping (address => PersonProfile) public players;\\n\\n    IPlanet nftContract;\\n    IWorld worldContract;\\n    IHashVault aaveVaultContract;\\n\\n    event TreasuryFunded(uint amountFunded);\\n\\n    event StepsAdded(uint stepsTaken, address player, uint timestamp);\\n\\n    event PlanetConquer(address player, uint amount, uint planetType); // TODO: add planetId\\n\\n\\n    constructor () {\\n    }\\n\\n    /**\\n        The address of our web2 backend.\\n        Messages from the backend which are verified in this contract\\n     */\\n    function setBackendAddress(address _address) public onlyOwner {\\n        backendAddress = _address;\\n    }\\n\\n    /**\\n        We set the Nft Contract, this can also be done in the constructor\\n     */\\n    function setNftAddress(address _nftContractAddress) public onlyOwner {\\n        nftContract = IPlanet(_nftContractAddress);\\n    }\\n\\n    /**\\n        We set the Worldcontract Contract, this can also be done in the constructor\\n     */\\n    function setWorldAddress(address _worldAddress) public onlyOwner {\\n        worldContract = IWorld(_worldAddress);\\n    }\\n\\n    /**\\n        We set the Worldcontract Contract, this can also be done in the constructor\\n     */\\n    function setAaveVault(address _address) public onlyOwner {\\n        aaveVaultContract = IHashVault(_address);\\n    }\\n\\n    /**\\n        Creates the user profile of the user and mints a starship nft\\n        and forwards $$ to the treasury\\n     */\\n    function registerProfile(string memory _tokenURI) public payable\\n     {\\n        _createProfile();\\n\\n        require(msg.value == NFTPRICE, \\\"Not enought/too much ether sent\\\");\\n\\n        // put coins to work in vault\\n        aaveVaultContract.deposit{value: msg.value}();\\n\\n        // mint ship\\n        uint256 shipId = nftContract.mint(msg.sender, _tokenURI);\\n        (uint startingX, uint startingY) = determineStartingPosition();\\n        nftContract.setLocation(shipId, msg.sender, startingX, startingY);\\n    }\\n\\n    function _createProfile() private {\\n        PersonProfile storage player = players[msg.sender];\\n        require(player.playerId == 0, \\\"you already signed up\\\");\\n        indexPlayerIds.increment();\\n        player.playerId = indexPlayerIds.current();\\n        player.timeJoined = block.timestamp;\\n        player.lastQueried = block.timestamp - (60*60*12); // give the user 12 hour window, so that he does not sign up with zero steps\\n        player.stepsAvailable = 0;\\n        player.totalStepsTaken = 0;\\n        player.amountEarned = 0;\\n    }\\n\\n    /**\\n        Sync the steps for the user\\n    */\\n    function syncSteps(bytes32 _hashedMessageBackend, uint256 _steps, uint256 _lastQueried, uint8 _v, bytes32 _r, bytes32 _s) public {\\n        // verify\\n        PersonProfile storage player = players[msg.sender];\\n        require(player.playerId != 0, \\\"you need to be registered\\\");\\n\\n        require(_lastQueried == player.lastQueried, \\\"last queried does not match\\\");\\n        verifySteps(_hashedMessageBackend, _steps, _lastQueried, _v, _r, _s);\\n\\n        // write\\n        player.totalStepsTaken += _steps;\\n        player.stepsAvailable += _steps;\\n        player.lastQueried = block.timestamp;\\n        emit StepsAdded(_steps, msg.sender, block.timestamp);\\n    }\\n\\n    function verifySteps(bytes32 _hashedMessageBackend, uint256 _message, uint256 _lastQueried, uint8 _v, bytes32 _r, bytes32 _s) public view {\\n\\n        bytes32 hashedMessageSol = keccak256(abi.encode(_message, _lastQueried));\\n        require(hashedMessageSol == _hashedMessageBackend, \\\"payload was modified\\\");\\n\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        bytes32 prefixedHashMessage = keccak256(abi.encodePacked(prefix, _hashedMessageBackend));\\n        address signer = ecrecover(prefixedHashMessage, _v, _r, _s);\\n\\n        require(signer == address(backendAddress), \\\"wrong signer\\\");\\n    }\\n\\n    /**\\n        Move the ship to a new position\\n        {_planetId} the planet you want to reach\\n        {_shipId} the ship you are moving\\n     */\\n    function moveShip(uint x, uint y, uint _planetId, uint _shipId, uint _worldId) public payable {\\n\\n        // current location of the ship\\n        (uint xCoordShip, uint yCoordShip) = nftContract.getLocation(_shipId);\\n\\n        // calculate distance moved\\n        uint travelX = get_abs_diff(xCoordShip, x);\\n        uint travelY = get_abs_diff(yCoordShip, y);\\n        uint travelDistance = uint(sqrt((travelX * travelX) + (travelY * travelY)));\\n\\n        // check enough steps available\\n        require(players[msg.sender].stepsAvailable > travelDistance * 10, \\\"Not enough steps available to move there\\\");\\n\\n        // update steps of user\\n        players[msg.sender].stepsAvailable -= travelDistance * 10;\\n\\n        // update ship position\\n        nftContract.setLocation(_shipId, msg.sender, x, y);\\n\\n        // check if we landed on a planet\\n        SharedStructs.Planet memory planet = worldContract.getPlanet(_planetId);\\n\\n        if (x == planet.xCoord && y == planet.yCoord) {\\n            _payout(planet.planetType);\\n        }\\n    }\\n\\n    function _payout(uint planetType) internal {\\n        // route to vaults\\n        if (planetType == 1) {\\n            uint yield = aaveVaultContract.yield();\\n\\n            if (yield > 0) {\\n                aaveVaultContract.withdraw(msg.sender);\\n                players[msg.sender].amountEarned += yield;\\n                emit PlanetConquer(msg.sender, yield, planetType);\\n            }\\n        }\\n        emit PlanetConquer(msg.sender, 0, planetType);\\n    }\\n\\n    function get_abs_diff(uint val1, uint val2) private pure returns (uint) {\\n        return val1 > val2 ? val1 - val2 : val2 - val1;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function determineStartingPosition() public returns(uint x, uint y) {\\n\\n        indexStartingPosition.increment();\\n        uint positionIndex = indexStartingPosition.current();\\n\\n        uint startingX = positionIndex * 42;\\n        uint startingY = 16;\\n\\n        if (positionIndex == 46) {\\n            indexStartingPosition.reset();\\n        }\\n\\n        return (startingX, startingY);\\n    }\\n}\",\"keccak256\":\"0xc606ae2e397af3911957a3fcc727b0f39a89ace2d3028434583e438c94252b65\",\"license\":\"Unlicense\"},\"contracts/interfaces/IHashVault.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IHashVault {\\n    function deposit() external payable;\\n    function withdraw(address _receiver) external;\\n    function yield() external view returns(uint);\\n}\",\"keccak256\":\"0x96087da2739f3ed4ae54113bab0c8cab7c752a02c3ae7bcb0081df9b86687431\",\"license\":\"Unlicense\"},\"contracts/interfaces/IPlanet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IPlanet {\\n    /**\\n      gets the location of the ship\\n    */\\n    function getLocation(\\n        uint256 _tokenId\\n    ) external returns (uint x, uint y);\\n\\n    /**\\n      sets the location of the ship\\n    */\\n    function setLocation(\\n        uint256 _tokenId,\\n        address _ownerAddress,\\n        uint x,\\n        uint y\\n    ) external;\\n\\n    /**\\n      mints a new nft ship\\n     */\\n    function mint(address player, string memory _tokenURI) external returns (uint256);\\n}\",\"keccak256\":\"0x9ed0ac4b0a3ff53ea37ca9550ed68f57164cbdc4b955328d6bb10c8dce07231d\",\"license\":\"Unlicense\"},\"contracts/interfaces/IWorld.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../structs/shared.sol\\\";\\n\\ninterface IWorld {\\n\\n    /**\\n      gets a planet\\n    */\\n    function getPlanet(uint _planetId) external view returns (SharedStructs.Planet memory);\\n}\",\"keccak256\":\"0x52205885fb2ff4e90bc59da1fa66202da179f1b9fbd7816b61ee0a738e4537c4\",\"license\":\"Unlicense\"},\"contracts/structs/shared.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary SharedStructs {\\n        // Define planet information\\n    struct Planet {\\n        uint planetID; // an ID that is unique across all world maps\\n        uint worldMapIndex; // which world map does this planet belong to\\n        uint xCoord; // x-axis coordinate in respective world map\\n        uint yCoord; // y-axis coordinate in respective world map\\n        uint planetType;\\n        uint balance; // The total value of tokens inside the planet\\n    }\\n}\",\"keccak256\":\"0xba5ad34f009c3b308f299dd2dc1ebeb55db9bd50af94a1831fef596997552809\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61243d806200010e6000396000f3fe6080604052600436106100e85760003560e01c80637912680d1161008a578063c04d0e5011610059578063c04d0e5014610297578063e2eb41ff146102c3578063e839665c14610305578063f2fde38b14610321576100e8565b80637912680d146101ef5780638da5cb5b14610218578063b93d28ee14610243578063ba1697161461026e576100e8565b8063240bcbfa116100c6578063240bcbfa146101685780633b72498a146101915780633fc90920146101bc578063715018a6146101d8576100e8565b80630b102d1a146100ed5780631815ce7d146101165780631822b8471461013f575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f919061176b565b61034a565b005b34801561012257600080fd5b5061013d6004803603810190610138919061176b565b61040a565b005b34801561014b57600080fd5b5061016660048036038101906101619190611794565b6104ca565b005b34801561017457600080fd5b5061018f600480360381019061018a9190611794565b61068f565b005b34801561019d57600080fd5b506101a66107f1565b6040516101b39190611db0565b60405180910390f35b6101d660048036038101906101d1919061181d565b6107fd565b005b3480156101e457600080fd5b506101ed610a2c565b005b3480156101fb57600080fd5b506102166004803603810190610211919061176b565b610ab4565b005b34801561022457600080fd5b5061022d610b74565b60405161023a9190611b92565b60405180910390f35b34801561024f57600080fd5b50610258610b9d565b6040516102659190611db0565b60405180910390f35b34801561027a57600080fd5b506102956004803603810190610290919061176b565b610ba8565b005b3480156102a357600080fd5b506102ac610c68565b6040516102ba929190611e47565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e5919061176b565b610cbb565b6040516102fc96959493929190611e70565b60405180910390f35b61031f600480360381019061031a91906118ec565b610cf7565b005b34801561032d57600080fd5b506103486004803603810190610343919061176b565b611061565b005b610352611159565b73ffffffffffffffffffffffffffffffffffffffff16610370610b74565b73ffffffffffffffffffffffffffffffffffffffff16146103c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bd90611d70565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610412611159565b73ffffffffffffffffffffffffffffffffffffffff16610430610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d90611d70565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600085856040516020016104df929190611e47565b604051602081830303815290604052805190602001209050868114610539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053090611cd0565b60405180910390fd5b60006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250905060008189604051602001610588929190611b6a565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516105c59493929190611c4b565b6020604051602081039080840390855afa1580156105e7573d6000803e3d6000fd5b505050602060405103519050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90611c90565b60405180910390fd5b50505050505050505050565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071190611d90565b60405180910390fd5b80600201548514610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790611d50565b60405180910390fd5b61076e8787878787876104ca565b858160040160008282546107829190611f59565b925050819055508581600301600082825461079d9190611f59565b925050819055504281600201819055507fea53fca5456139f39e787af7250a4c0571c46facc363f3083ec3fa7a0d65888e8633426040516107e093929190611dcb565b60405180910390a150505050505050565b60028060000154905081565b610805611161565b662386f26fc10000341461084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590611d10565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108b857600080fd5b505af11580156108cc573d6000803e3d6000fd5b50505050506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0def52133846040518363ffffffff1660e01b8152600401610930929190611be4565b602060405180830381600087803b15801561094a57600080fd5b505af115801561095e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109829190611887565b905060008061098f610c68565b91509150600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4881477843385856040518563ffffffff1660e01b81526004016109f49493929190611e02565b600060405180830381600087803b158015610a0e57600080fd5b505af1158015610a22573d6000803e3d6000fd5b5050505050505050565b610a34611159565b73ffffffffffffffffffffffffffffffffffffffff16610a52610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90611d70565b60405180910390fd5b610ab26000611247565b565b610abc611159565b73ffffffffffffffffffffffffffffffffffffffff16610ada610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2790611d70565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b662386f26fc1000081565b610bb0611159565b73ffffffffffffffffffffffffffffffffffffffff16610bce610b74565b73ffffffffffffffffffffffffffffffffffffffff1614610c24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1b90611d70565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610c75600261130b565b6000610c816002611321565b90506000602a82610c929190611fe0565b9050600060109050602e831415610cae57610cad600261132f565b5b8181945094505050509091565b60046020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154905086565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f7b1393856040518263ffffffff1660e01b8152600401610d559190611db0565b6040805180830381600087803b158015610d6e57600080fd5b505af1158015610d82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da691906118b0565b915091506000610db6838961133c565b90506000610dc4838961133c565b90506000610df28283610dd79190611fe0565b8485610de39190611fe0565b610ded9190611f59565b61136b565b9050600a81610e019190611fe0565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610e84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7b90611cf0565b60405180910390fd5b600a81610e919190611fe0565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610ee2919061203a565b92505081905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f488147788338d8d6040518563ffffffff1660e01b8152600401610f4a9493929190611e02565b600060405180830381600087803b158015610f6457600080fd5b505af1158015610f78573d6000803e3d6000fd5b505050506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334efcb8e8a6040518263ffffffff1660e01b8152600401610fd99190611db0565b60c06040518083038186803b158015610ff157600080fd5b505afa158015611005573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611029919061185e565b905080604001518b148015611041575080606001518a145b156110545761105381608001516113e5565b5b5050505050505050505050565b611069611159565b73ffffffffffffffffffffffffffffffffffffffff16611087610b74565b73ffffffffffffffffffffffffffffffffffffffff16146110dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d490611d70565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561114d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114490611cb0565b60405180910390fd5b61115681611247565b50565b600033905090565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154146111eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e290611d30565b60405180910390fd5b6111f5600161130b565b6111ff6001611321565b816000018190555042816001018190555061a8c04261121e919061203a565b816002018190555060008160030181905550600081600401819055506000816005018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000816000018190555050565b6000818311611356578282611351919061203a565b611363565b8183611362919061203a565b5b905092915050565b600060038211156113d2578190506000600160028461138a9190611faf565b6113949190611f59565b90505b818110156113cc5780915060028182856113b19190611faf565b6113bb9190611f59565b6113c59190611faf565b9050611397565b506113e0565b600082146113df57600190505b5b919050565b60018114156115bf576000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663285939846040518163ffffffff1660e01b815260040160206040518083038186803b15801561145857600080fd5b505afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190611887565b905060008111156115bd57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351cff8d9336040518263ffffffff1660e01b81526004016114f69190611b92565b600060405180830381600087803b15801561151057600080fd5b505af1158015611524573d6000803e3d6000fd5b5050505080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501600082825461157a9190611f59565b925050819055507f59ef31821b015e51b3e5bf608636da7db2b7cde28283955437e586ebc48fc5c83382846040516115b493929190611c14565b60405180910390a15b505b7f59ef31821b015e51b3e5bf608636da7db2b7cde28283955437e586ebc48fc5c8336000836040516115f393929190611bad565b60405180910390a150565b600061161161160c84611ef6565b611ed1565b90508281526020810184848401111561162957600080fd5b6116348482856120d3565b509392505050565b60008135905061164b816123ab565b92915050565b600081359050611660816123c2565b92915050565b600082601f83011261167757600080fd5b81356116878482602086016115fe565b91505092915050565b600060c082840312156116a257600080fd5b6116ac60c0611ed1565b905060006116bc84828501611741565b60008301525060206116d084828501611741565b60208301525060406116e484828501611741565b60408301525060606116f884828501611741565b606083015250608061170c84828501611741565b60808301525060a061172084828501611741565b60a08301525092915050565b60008135905061173b816123d9565b92915050565b600081519050611750816123d9565b92915050565b600081359050611765816123f0565b92915050565b60006020828403121561177d57600080fd5b600061178b8482850161163c565b91505092915050565b60008060008060008060c087890312156117ad57600080fd5b60006117bb89828a01611651565b96505060206117cc89828a0161172c565b95505060406117dd89828a0161172c565b94505060606117ee89828a01611756565b93505060806117ff89828a01611651565b92505060a061181089828a01611651565b9150509295509295509295565b60006020828403121561182f57600080fd5b600082013567ffffffffffffffff81111561184957600080fd5b61185584828501611666565b91505092915050565b600060c0828403121561187057600080fd5b600061187e84828501611690565b91505092915050565b60006020828403121561189957600080fd5b60006118a784828501611741565b91505092915050565b600080604083850312156118c357600080fd5b60006118d185828601611741565b92505060206118e285828601611741565b9150509250929050565b600080600080600060a0868803121561190457600080fd5b60006119128882890161172c565b95505060206119238882890161172c565b94505060406119348882890161172c565b93505060606119458882890161172c565b92505060806119568882890161172c565b9150509295509295909350565b61196c8161206e565b82525050565b61197b81612080565b82525050565b61199261198d82612080565b612146565b82525050565b60006119a382611f27565b6119ad8185611f3d565b93506119bd8185602086016120e2565b80840191505092915050565b6119d2816120c1565b82525050565b60006119e382611f32565b6119ed8185611f48565b93506119fd8185602086016120e2565b611a06816121dd565b840191505092915050565b6000611a1e600c83611f48565b9150611a29826121ee565b602082019050919050565b6000611a41602683611f48565b9150611a4c82612217565b604082019050919050565b6000611a64601483611f48565b9150611a6f82612266565b602082019050919050565b6000611a87602883611f48565b9150611a928261228f565b604082019050919050565b6000611aaa601f83611f48565b9150611ab5826122de565b602082019050919050565b6000611acd601583611f48565b9150611ad882612307565b602082019050919050565b6000611af0601b83611f48565b9150611afb82612330565b602082019050919050565b6000611b13602083611f48565b9150611b1e82612359565b602082019050919050565b6000611b36601983611f48565b9150611b4182612382565b602082019050919050565b611b55816120aa565b82525050565b611b64816120b4565b82525050565b6000611b768285611998565b9150611b828284611981565b6020820191508190509392505050565b6000602082019050611ba76000830184611963565b92915050565b6000606082019050611bc26000830186611963565b611bcf60208301856119c9565b611bdc6040830184611b4c565b949350505050565b6000604082019050611bf96000830185611963565b8181036020830152611c0b81846119d8565b90509392505050565b6000606082019050611c296000830186611963565b611c366020830185611b4c565b611c436040830184611b4c565b949350505050565b6000608082019050611c606000830187611972565b611c6d6020830186611b5b565b611c7a6040830185611972565b611c876060830184611972565b95945050505050565b60006020820190508181036000830152611ca981611a11565b9050919050565b60006020820190508181036000830152611cc981611a34565b9050919050565b60006020820190508181036000830152611ce981611a57565b9050919050565b60006020820190508181036000830152611d0981611a7a565b9050919050565b60006020820190508181036000830152611d2981611a9d565b9050919050565b60006020820190508181036000830152611d4981611ac0565b9050919050565b60006020820190508181036000830152611d6981611ae3565b9050919050565b60006020820190508181036000830152611d8981611b06565b9050919050565b60006020820190508181036000830152611da981611b29565b9050919050565b6000602082019050611dc56000830184611b4c565b92915050565b6000606082019050611de06000830186611b4c565b611ded6020830185611963565b611dfa6040830184611b4c565b949350505050565b6000608082019050611e176000830187611b4c565b611e246020830186611963565b611e316040830185611b4c565b611e3e6060830184611b4c565b95945050505050565b6000604082019050611e5c6000830185611b4c565b611e696020830184611b4c565b9392505050565b600060c082019050611e856000830189611b4c565b611e926020830188611b4c565b611e9f6040830187611b4c565b611eac6060830186611b4c565b611eb96080830185611b4c565b611ec660a0830184611b4c565b979650505050505050565b6000611edb611eec565b9050611ee78282612115565b919050565b6000604051905090565b600067ffffffffffffffff821115611f1157611f106121ae565b5b611f1a826121dd565b9050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611f64826120aa565b9150611f6f836120aa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611fa457611fa3612150565b5b828201905092915050565b6000611fba826120aa565b9150611fc5836120aa565b925082611fd557611fd461217f565b5b828204905092915050565b6000611feb826120aa565b9150611ff6836120aa565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561202f5761202e612150565b5b828202905092915050565b6000612045826120aa565b9150612050836120aa565b92508282101561206357612062612150565b5b828203905092915050565b60006120798261208a565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006120cc826120aa565b9050919050565b82818337600083830152505050565b60005b838110156121005780820151818401526020810190506120e5565b8381111561210f576000848401525b50505050565b61211e826121dd565b810181811067ffffffffffffffff8211171561213d5761213c6121ae565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f77726f6e67207369676e65720000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f7061796c6f616420776173206d6f646966696564000000000000000000000000600082015250565b7f4e6f7420656e6f75676820737465707320617661696c61626c6520746f206d6f60008201527f7665207468657265000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f756768742f746f6f206d7563682065746865722073656e7400600082015250565b7f796f7520616c7265616479207369676e65642075700000000000000000000000600082015250565b7f6c617374207175657269656420646f6573206e6f74206d617463680000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f796f75206e65656420746f206265207265676973746572656400000000000000600082015250565b6123b48161206e565b81146123bf57600080fd5b50565b6123cb81612080565b81146123d657600080fd5b50565b6123e2816120aa565b81146123ed57600080fd5b50565b6123f9816120b4565b811461240457600080fd5b5056fea26469706673582212206cdca02ad09c362b92038d106b50a2ced11a8c133970a7692c36e7f28880cb7d64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "moveShip(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Move the ship to a new position {_planetId} the planet you want to reach {_shipId} the ship you are moving"
      },
      "registerProfile(string)": {
        "notice": "Creates the user profile of the user and mints a starship nft and forwards $$ to the treasury"
      },
      "setAaveVault(address)": {
        "notice": "We set the Worldcontract Contract, this can also be done in the constructor"
      },
      "setBackendAddress(address)": {
        "notice": "The address of our web2 backend. Messages from the backend which are verified in this contract"
      },
      "setNftAddress(address)": {
        "notice": "We set the Nft Contract, this can also be done in the constructor"
      },
      "setWorldAddress(address)": {
        "notice": "We set the Worldcontract Contract, this can also be done in the constructor"
      },
      "syncSteps(bytes32,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sync the steps for the user"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 617,
        "contract": "contracts/Players.sol:Players",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4136,
        "contract": "contracts/Players.sol:Players",
        "label": "indexPlayerIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)2881_storage"
      },
      {
        "astId": 4139,
        "contract": "contracts/Players.sol:Players",
        "label": "indexStartingPosition",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)2881_storage"
      },
      {
        "astId": 4141,
        "contract": "contracts/Players.sol:Players",
        "label": "backendAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4146,
        "contract": "contracts/Players.sol:Players",
        "label": "players",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(PersonProfile)4133_storage)"
      },
      {
        "astId": 4149,
        "contract": "contracts/Players.sol:Players",
        "label": "nftContract",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IPlanet)5454"
      },
      {
        "astId": 4152,
        "contract": "contracts/Players.sol:Players",
        "label": "worldContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IWorld)5467"
      },
      {
        "astId": 4155,
        "contract": "contracts/Players.sol:Players",
        "label": "aaveVaultContract",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IHashVault)5419"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IHashVault)5419": {
        "encoding": "inplace",
        "label": "contract IHashVault",
        "numberOfBytes": "20"
      },
      "t_contract(IPlanet)5454": {
        "encoding": "inplace",
        "label": "contract IPlanet",
        "numberOfBytes": "20"
      },
      "t_contract(IWorld)5467": {
        "encoding": "inplace",
        "label": "contract IWorld",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(PersonProfile)4133_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Players.PersonProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(PersonProfile)4133_storage"
      },
      "t_struct(Counter)2881_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2880,
            "contract": "contracts/Players.sol:Players",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PersonProfile)4133_storage": {
        "encoding": "inplace",
        "label": "struct Players.PersonProfile",
        "members": [
          {
            "astId": 4122,
            "contract": "contracts/Players.sol:Players",
            "label": "playerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4124,
            "contract": "contracts/Players.sol:Players",
            "label": "timeJoined",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4126,
            "contract": "contracts/Players.sol:Players",
            "label": "lastQueried",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4128,
            "contract": "contracts/Players.sol:Players",
            "label": "stepsAvailable",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4130,
            "contract": "contracts/Players.sol:Players",
            "label": "totalStepsTaken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4132,
            "contract": "contracts/Players.sol:Players",
            "label": "amountEarned",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}